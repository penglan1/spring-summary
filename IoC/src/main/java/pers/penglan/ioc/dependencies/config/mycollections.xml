<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="myCollections" class="pers.penglan.ioc.entity.dependencies.MyCollections">
        <property name="properties">
            <props>
                <prop key="user">刘备</prop>
                <prop key="password">liubei123</prop>
                <prop key="rank">1</prop>
            </props>
        </property>
        <property name="list">
            <list>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </list>
        </property>
        <property name="map">
            <map>
                <entry key="name" value="关羽"/>
                <entry key="tip" value="青龙偃月刀"/>
            </map>
        </property>
        <property name="set">
            <set>
                <value>A</value>
                <value>B</value>
                <value>C</value>
            </set>
        </property>
    </bean>
    <!--
    The Spring container also supports the merging of collections. An application developer can define
    a parent-style <list/>, <map/>, <set/> or <props/> element, and have child-style <list/>, <map/>,
    <set/> or <props/> elements inherit and override values from the parent collection. That is, the child
    collection’s values are the result of merging the elements of the parent and child collections, with
    the child’s collection elements overriding values specified in the parent collection.
    -->
    <!--
    This merging behavior applies similarly to the <list/>, <map/>, and <set/> collection types. In the
    specific case of the <list/> element, the semantics associated with the List collection type, that is,
    the notion of an ordered collection of values, is maintained; the parent’s values precede all of the
    child list’s values. In the case of the Map, Set, and Properties collection types, no ordering exists.
    Hence no ordering semantics are in effect for the collection types that underlie the associated Map,
    Set, and Properties implementation types that the container uses internally
    -->
    <bean id="collectionsMerging" parent="myCollections">
        <property name="properties">
            <props merge="true">
                <prop key="user">马超</prop>
                <prop key="password">machao123</prop>
                <prop key="rank">3</prop>
            </props>
        </property>
        <property name="list">
            <list merge="true">
                <value>4</value>
                <value>6</value>
                <value>4</value>
                <value></value>
            </list>
        </property>
        <property name="map">
            <map merge="true">
                <entry key="name" value="关羽"/>
                <entry key="tip" value="青龙偃月刀,横扫天下"/>
            </map>
        </property>
        <property name="set">
            <set merge="true">
                <value>D</value>
                <value>B</value>
                <value>C</value>
                <null/>
                <value>F</value>
            </set>
        </property>
    </bean>
</beans>