<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
    the container instantiates, configures, and otherwise assembles a prototype object, and hands it to
    the client, with no further record of that prototype instance. Thus, although initialization lifecycle
    callback methods are called on all objects regardless of scope, in the case of prototypes, configured
    destruction lifecycle callbacks are not called. The client code must clean up prototype-scoped
    objects and release expensive resources that the prototype bean(s) are holding. To get the Spring
    container to release resources held by prototype-scoped beans, try using a custom bean post-
    processor, which holds a reference to beans that need to be cleaned up.
    -->
    <bean id="a" class="pers.penglan.ioc.entity.begin.A" scope="prototype"></bean>
    <bean id="b" class="pers.penglan.ioc.entity.begin.B" scope="singleton"></bean>
</beans>